{"ast":null,"code":"var _jsxFileName = \"/Users/astghik/WebstormProjects/interactive-map-task/src/components/CSVReaderButtons/CSVReaderButtons.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useRef } from 'react';\nimport styles from './CSVReaderButtons.module.scss';\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../stores/RootStore\";\nimport Button from \"../Button/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CSVReaderButtons = _s(observer(_c = _s(() => {\n  _s();\n  const fileInputRef = useRef(null);\n  const {\n    listStore: {\n      addItems,\n      list\n    }\n  } = useContext(RootStoreContext);\n  const handleFileSelect = e => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = event => {\n        const result = event.target.result;\n        const lines = result.split('\\n').map(line => line.trim());\n\n        // Ensure the file has at least one data row\n        if (lines.length < 2) {\n          alert('Error: CSV file is empty or does not contain data.');\n          return;\n        }\n\n        // Ensure the header row contains expected column names\n        const headerRow = lines[0].split(',');\n        const isLatLongHeader = headerRow.length === 2 && (headerRow[0].toLowerCase() === 'latitude' || headerRow[0].toLowerCase() === 'lat') && (headerRow[1].toLowerCase() === 'longitude' || headerRow[1].toLowerCase() === 'lng');\n        if (headerRow.length !== 2 || headerRow[0] !== 'Latitude' || headerRow[1] !== 'Longitude') {\n          alert('Error: CSV file format is incorrect. Expected header row: \"Latitude,Longitude\".');\n          return;\n        }\n\n        // Exclude the header row\n        const parsedData = lines.slice(1).map(line => {\n          const [lat, lng] = line.split(',');\n          return {\n            lat: parseFloat(lat),\n            lng: parseFloat(lng)\n          };\n        });\n\n        // Filter out empty lines\n        const filteredData = parsedData.filter(item => item.lat && item.lng);\n        addItems(filteredData);\n      };\n      reader.readAsText(file);\n    }\n  };\n  const exportData = data => {\n    const csvContent = \"data:text/csv;charset=utf-8,\" + \"Latitude,Longitude\\n\" + data.map(item => `${item.lat},${item.lng}`).join('\\n');\n    const encodedUri = encodeURI(csvContent);\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodedUri);\n    link.setAttribute(\"download\", \"exported_data.csv\");\n    document.body.appendChild(link);\n    link.click();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.root,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.import,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file-upload\",\n        className: styles.button,\n        children: \"Import Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"file-upload\",\n        accept: \".csv, .xlsx, .xls\",\n        ref: fileInputRef,\n        style: {\n          display: 'none'\n        },\n        onChange: handleFileSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: \"Export Data\",\n      onClick: () => exportData(list)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 13\n  }, this);\n}, \"ejbu6tHxc9w4hpos4YA5+I2HQys=\")), \"ejbu6tHxc9w4hpos4YA5+I2HQys=\");\n_c2 = CSVReaderButtons;\nexport default CSVReaderButtons;\nvar _c, _c2;\n$RefreshReg$(_c, \"CSVReaderButtons$observer\");\n$RefreshReg$(_c2, \"CSVReaderButtons\");","map":{"version":3,"names":["React","useContext","useRef","styles","observer","RootStoreContext","Button","jsxDEV","_jsxDEV","CSVReaderButtons","_s","_c","fileInputRef","listStore","addItems","list","handleFileSelect","e","file","target","files","reader","FileReader","onload","event","result","lines","split","map","line","trim","length","alert","headerRow","isLatLongHeader","toLowerCase","parsedData","slice","lat","lng","parseFloat","filteredData","filter","item","readAsText","exportData","data","csvContent","join","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","className","root","children","import","htmlFor","button","fileName","_jsxFileName","lineNumber","columnNumber","type","id","accept","ref","style","display","onChange","text","onClick","_c2","$RefreshReg$"],"sources":["/Users/astghik/WebstormProjects/interactive-map-task/src/components/CSVReaderButtons/CSVReaderButtons.js"],"sourcesContent":["import React, {useContext, useRef} from 'react';\nimport styles from './CSVReaderButtons.module.scss'\nimport {observer} from \"mobx-react-lite\";\nimport {RootStoreContext} from \"../../stores/RootStore\";\nimport Button from \"../Button/Button\";\n\nconst CSVReaderButtons = observer(() => {\n        const fileInputRef = useRef(null);\n\n        const {\n            listStore: {\n                addItems,\n                list\n            }\n        } = useContext(RootStoreContext)\n\n        const handleFileSelect = (e) => {\n            const file = e.target.files[0];\n            if (file) {\n                const reader = new FileReader();\n                reader.onload = (event) => {\n                    const result = event.target.result;\n                    const lines = result.split('\\n').map(line => line.trim());\n\n                    // Ensure the file has at least one data row\n                    if (lines.length < 2) {\n                        alert('Error: CSV file is empty or does not contain data.');\n                        return;\n                    }\n\n                    // Ensure the header row contains expected column names\n                    const headerRow = lines[0].split(',');\n                    const isLatLongHeader = (\n                        headerRow.length === 2 &&\n                        (headerRow[0].toLowerCase() === 'latitude' || headerRow[0].toLowerCase() === 'lat') &&\n                        (headerRow[1].toLowerCase() === 'longitude' || headerRow[1].toLowerCase() === 'lng')\n                    );\n\n                    if (headerRow.length !== 2 || headerRow[0] !== 'Latitude' || headerRow[1] !== 'Longitude') {\n                        alert('Error: CSV file format is incorrect. Expected header row: \"Latitude,Longitude\".');\n                        return;\n                    }\n\n\n                    // Exclude the header row\n                    const parsedData = lines.slice(1).map(line => {\n                        const [lat, lng] = line.split(',');\n                        return {lat: parseFloat(lat), lng: parseFloat(lng)};\n                    });\n\n                    // Filter out empty lines\n                    const filteredData = parsedData.filter(item => item.lat && item.lng);\n\n\n                    addItems(filteredData);\n                };\n                reader.readAsText(file);\n            }\n        };\n\n\n        const exportData = (data) => {\n            const csvContent = \"data:text/csv;charset=utf-8,\" +\n                \"Latitude,Longitude\\n\" +\n                data.map(item => `${item.lat},${item.lng}`).join('\\n');\n            const encodedUri = encodeURI(csvContent);\n            const link = document.createElement(\"a\");\n            link.setAttribute(\"href\", encodedUri);\n            link.setAttribute(\"download\", \"exported_data.csv\");\n            document.body.appendChild(link);\n            link.click();\n        };\n\n        return (\n            <div className={styles.root}>\n                <div className={styles.import}>\n                    <label htmlFor=\"file-upload\" className={styles.button}>\n                        Import Data\n                    </label>\n                    <input\n                        type=\"file\"\n                        id=\"file-upload\"\n                        accept=\".csv, .xlsx, .xls\"\n                        ref={fileInputRef}\n                        style={{display: 'none'}}\n                        onChange={handleFileSelect}\n                    />\n                </div>\n                <Button text=\"Export Data\" onClick={() => exportData(list)}/>\n            </div>\n        );\n    }\n);\n\nexport default CSVReaderButtons;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}