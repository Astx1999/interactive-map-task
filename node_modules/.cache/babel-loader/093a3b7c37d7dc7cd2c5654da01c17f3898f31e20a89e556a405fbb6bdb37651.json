{"ast":null,"code":"import React,{useContext,useRef}from'react';import styles from'./CSVReaderButtons.module.scss';import{observer}from\"mobx-react-lite\";import{RootStoreContext}from\"../../stores/RootStore\";import Button from\"../Button/Button\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const CSVReaderButtons=observer(()=>{const fileInputRef=useRef(null);const{listStore:{addItems,list}}=useContext(RootStoreContext);const handleFileSelect=e=>{const file=e.target.files[0];if(file){const reader=new FileReader();reader.onload=event=>{const result=event.target.result;const lines=result.split('\\n').map(line=>line.trim());// Ensure the file has at least one data row\nif(lines.length<2){alert('Error: CSV file is empty or does not contain data.');return;}// Ensure the header row contains expected column names\nconst headerRow=lines[0].split(',');const isLatLongHeader=headerRow.length===2&&(headerRow[0].toLowerCase()==='latitude'||headerRow[0].toLowerCase()==='lat')&&(headerRow[1].toLowerCase()==='longitude'||headerRow[1].toLowerCase()==='lng');if(!isLatLongHeader){alert('Error: CSV file format is incorrect. Expected header row: \"Latitude,Longitude\".');return;}// Exclude the header row\nconst parsedData=lines.slice(1).map(line=>{const[lat,lng]=line.split(',');return{lat:parseFloat(lat),lng:parseFloat(lng)};});// Filter out empty lines\nconst filteredData=parsedData.filter(item=>item.lat&&item.lng);addItems(filteredData);};reader.readAsText(file);}};const exportData=data=>{const csvContent=\"data:text/csv;charset=utf-8,\"+\"Latitude,Longitude\\n\"+data.map(item=>\"\".concat(item.lat,\",\").concat(item.lng)).join('\\n');const encodedUri=encodeURI(csvContent);const link=document.createElement(\"a\");link.setAttribute(\"href\",encodedUri);link.setAttribute(\"download\",\"exported_data.csv\");document.body.appendChild(link);link.click();};return/*#__PURE__*/_jsxs(\"div\",{className:styles.root,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.import,children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"file-upload\",className:styles.button,children:\"Import Data\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",id:\"file-upload\",accept:\".csv, .xlsx, .xls\",ref:fileInputRef,style:{display:'none'},onChange:handleFileSelect})]}),/*#__PURE__*/_jsx(Button,{text:\"Export Data\",onClick:()=>exportData(list)})]});});export default CSVReaderButtons;","map":{"version":3,"names":["React","useContext","useRef","styles","observer","RootStoreContext","Button","jsx","_jsx","jsxs","_jsxs","CSVReaderButtons","fileInputRef","listStore","addItems","list","handleFileSelect","e","file","target","files","reader","FileReader","onload","event","result","lines","split","map","line","trim","length","alert","headerRow","isLatLongHeader","toLowerCase","parsedData","slice","lat","lng","parseFloat","filteredData","filter","item","readAsText","exportData","data","csvContent","concat","join","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","className","root","children","import","htmlFor","button","type","id","accept","ref","style","display","onChange","text","onClick"],"sources":["/Users/astghik/WebstormProjects/interactive-map-task/src/components/CSVReaderButtons/CSVReaderButtons.js"],"sourcesContent":["import React, {useContext, useRef} from 'react';\nimport styles from './CSVReaderButtons.module.scss'\nimport {observer} from \"mobx-react-lite\";\nimport {RootStoreContext} from \"../../stores/RootStore\";\nimport Button from \"../Button/Button\";\n\nconst CSVReaderButtons = observer(() => {\n        const fileInputRef = useRef(null);\n\n        const {\n            listStore: {\n                addItems,\n                list\n            }\n        } = useContext(RootStoreContext)\n\n        const handleFileSelect = (e) => {\n            const file = e.target.files[0];\n            if (file) {\n                const reader = new FileReader();\n                reader.onload = (event) => {\n                    const result = event.target.result;\n                    const lines = result.split('\\n').map(line => line.trim());\n\n                    // Ensure the file has at least one data row\n                    if (lines.length < 2) {\n                        alert('Error: CSV file is empty or does not contain data.');\n                        return;\n                    }\n                    // Ensure the header row contains expected column names\n                    const headerRow = lines[0].split(',');\n                    const isLatLongHeader = (\n                        headerRow.length === 2 &&\n                        (headerRow[0].toLowerCase() === 'latitude' || headerRow[0].toLowerCase() === 'lat') &&\n                        (headerRow[1].toLowerCase() === 'longitude' || headerRow[1].toLowerCase() === 'lng')\n                    );\n                    if (!isLatLongHeader) {\n                        alert('Error: CSV file format is incorrect. Expected header row: \"Latitude,Longitude\".');\n                        return;\n                    }\n\n                    // Exclude the header row\n                    const parsedData = lines.slice(1).map(line => {\n                        const [lat, lng] = line.split(',');\n                        return {lat: parseFloat(lat), lng: parseFloat(lng)};\n                    });\n\n                    // Filter out empty lines\n                    const filteredData = parsedData.filter(item => item.lat && item.lng);\n\n\n                    addItems(filteredData);\n                };\n                reader.readAsText(file);\n            }\n        };\n\n\n        const exportData = (data) => {\n            const csvContent = \"data:text/csv;charset=utf-8,\" +\n                \"Latitude,Longitude\\n\" +\n                data.map(item => `${item.lat},${item.lng}`).join('\\n');\n            const encodedUri = encodeURI(csvContent);\n            const link = document.createElement(\"a\");\n            link.setAttribute(\"href\", encodedUri);\n            link.setAttribute(\"download\", \"exported_data.csv\");\n            document.body.appendChild(link);\n            link.click();\n        };\n\n        return (\n            <div className={styles.root}>\n                <div className={styles.import}>\n                    <label htmlFor=\"file-upload\" className={styles.button}>\n                        Import Data\n                    </label>\n                    <input\n                        type=\"file\"\n                        id=\"file-upload\"\n                        accept=\".csv, .xlsx, .xls\"\n                        ref={fileInputRef}\n                        style={{display: 'none'}}\n                        onChange={handleFileSelect}\n                    />\n                </div>\n                <Button text=\"Export Data\" onClick={() => exportData(list)}/>\n            </div>\n        );\n    }\n);\n\nexport default CSVReaderButtons;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}