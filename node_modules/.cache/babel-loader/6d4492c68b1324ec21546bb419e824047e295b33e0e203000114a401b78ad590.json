{"ast":null,"code":"var _jsxFileName = \"/Users/astghik/WebstormProjects/interactive-map-task/src/components/CSVReaderButtons/CSVReaderButtons.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useRef } from 'react';\nimport styles from './CSVReaderButtons.module.scss';\nimport { observer } from \"mobx-react-lite\";\nimport { RootStoreContext } from \"../../stores/RootStore\";\nimport Button from \"../Button/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CSVReaderButtons = _s(observer(_c = _s(() => {\n  _s();\n  const fileInputRef = useRef(null);\n  const {\n    listStore: {\n      addItems\n    }\n  } = useContext(RootStoreContext);\n  const handleFileSelect = e => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = event => {\n        const result = event.target.result;\n        const lines = result.split('\\n').map(line => line.trim());\n\n        // Exclude the header row\n        const parsedData = lines.slice(1).map(line => {\n          const [lat, lng] = line.split(',');\n          return {\n            lat: parseFloat(lat),\n            lng: parseFloat(lng)\n          };\n        });\n\n        // Filter out empty lines\n        const filteredData = parsedData.filter(item => item.lat && item.lng);\n        addItems(filteredData);\n      };\n      reader.readAsText(file);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.root,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.import,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"file-upload\",\n        className: styles.button,\n        children: \"Import Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"file-upload\",\n        accept: \".csv, .xlsx, .xls\",\n        ref: fileInputRef,\n        style: {\n          display: 'none'\n        },\n        onChange: handleFileSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      text: \"Export Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 13\n  }, this);\n}, \"DJGu80RQ9rIoEZ+nfM+M3G2TjWg=\")), \"DJGu80RQ9rIoEZ+nfM+M3G2TjWg=\");\n_c2 = CSVReaderButtons;\nexport default CSVReaderButtons;\nvar _c, _c2;\n$RefreshReg$(_c, \"CSVReaderButtons$observer\");\n$RefreshReg$(_c2, \"CSVReaderButtons\");","map":{"version":3,"names":["React","useContext","useRef","styles","observer","RootStoreContext","Button","jsxDEV","_jsxDEV","CSVReaderButtons","_s","_c","fileInputRef","listStore","addItems","handleFileSelect","e","file","target","files","reader","FileReader","onload","event","result","lines","split","map","line","trim","parsedData","slice","lat","lng","parseFloat","filteredData","filter","item","readAsText","className","root","children","import","htmlFor","button","fileName","_jsxFileName","lineNumber","columnNumber","type","id","accept","ref","style","display","onChange","text","_c2","$RefreshReg$"],"sources":["/Users/astghik/WebstormProjects/interactive-map-task/src/components/CSVReaderButtons/CSVReaderButtons.js"],"sourcesContent":["import React, {useContext, useRef} from 'react';\nimport styles from './CSVReaderButtons.module.scss'\nimport {observer} from \"mobx-react-lite\";\nimport {RootStoreContext} from \"../../stores/RootStore\";\nimport Button from \"../Button/Button\";\n\nconst CSVReaderButtons = observer(() => {\n        const fileInputRef = useRef(null);\n\n        const {\n            listStore: {\n                addItems\n            }\n        } = useContext(RootStoreContext)\n\n        const handleFileSelect = (e) => {\n            const file = e.target.files[0];\n            if (file) {\n                const reader = new FileReader();\n                reader.onload = (event) => {\n                    const result = event.target.result;\n                    const lines = result.split('\\n').map(line => line.trim());\n\n                    // Exclude the header row\n                    const parsedData = lines.slice(1).map(line => {\n                        const [lat, lng] = line.split(',');\n                        return { lat: parseFloat(lat), lng: parseFloat(lng) };\n                    });\n\n                    // Filter out empty lines\n                    const filteredData = parsedData.filter(item => item.lat && item.lng);\n\n\n                    addItems(filteredData);\n                };\n                reader.readAsText(file);\n            }\n        };\n\n        return (\n            <div className={styles.root}>\n                <div className={styles.import}>\n                    <label htmlFor=\"file-upload\" className={styles.button}>\n                        Import Data\n                    </label>\n                    <input\n                        type=\"file\"\n                        id=\"file-upload\"\n                        accept=\".csv, .xlsx, .xls\"\n                        ref={fileInputRef}\n                        style={{display: 'none'}}\n                        onChange={handleFileSelect}\n                    />\n                </div>\n                <Button text=\"Export Data\"/>\n            </div>\n        );\n    }\n);\n\nexport default CSVReaderButtons;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}